# Cursor Rules

## Core Principles
- Respecte la structure du projet Next.js 15 + TypeScript + Tailwind + Prisma + Shadcn UI.
- Utilise des composants fonctionnels React avec typage strict.
- Préfère les Server Components et les conventions Next.js App Router.
- Utilise ESLint et Prettier pour la qualité du code.
- Documente les décisions d'architecture dans le code ou le README.

## Qualité et bonnes pratiques
- Tout code doit passer ESLint et Prettier.
- Utilise des types explicites pour les props et les retours de fonction.
- Privilégie la composition de composants et la réutilisabilité.
- Ajoute des tests unitaires pour les fonctions critiques.
- Garde le code simple, lisible et modulaire.

## Gestion de projet
- Utilise la section Scratchpad pour planifier et suivre les tâches.
- Mets à jour la section Lessons pour noter les corrections et apprentissages.
- Utilise les todo markers [X]/[ ] pour le suivi d'avancement.

## Structure recommandée
- /app : pages et routes Next.js
- /components : composants UI réutilisables
- /lib : utilitaires et logique métier
- /prisma : schéma et seed de la base
- /public : assets statiques
- /src : code source principal (si utilisé)
- /scripts : scripts utilitaires

## Technologies principales
- Next.js 15
- React 19
- TypeScript
- Tailwind CSS
- Prisma ORM
- Shadcn UI
- Zustand (state)
- Zod (validation)
- Stripe (paiement)
- Resend (emails)
- Uploadthing (fichiers)

## Tests
- Utilise Jest et React Testing Library pour les tests unitaires et d'intégration.

## Déploiement
- Préfère Vercel pour le déploiement.
- Documente les variables d'environnement nécessaires dans .env.example.

## Sécurité
- Ne jamais commit de secrets ou credentials.
- Utilise des variables d'environnement pour toute donnée sensible.

## Documentation
- Documente les endpoints API, les modèles de données et les workflows critiques dans le README ou un dossier /docs.

## Lessons

## Scratchpad

### 1. Project Setup and Configuration [ ]

- [X] Initialize Next.js 15 project with TypeScript
- [X] Set up project structure and folders
- [X] Configure ESLint and Prettier
- [X] Install and configure dependencies:
  - [X] Shadcn UI components
  - [X] Lucide icons
  - [X] Zod for validation
  - [X] Zustand for state management
  - [X] Recharts for analytics
  - [X] Resend for emails
  - [X] Uploadthing for file uploads
  - [X] Prisma ORM
  - [X] PostgreSQL database
  - [X] NextAuth.js beta for authentication
  - [X] Stripe for payments

### 2. Database and Authentication [ ]

- [X] Set up PostgreSQL database
- [X] Configure Prisma schema:
  - [X] User model
  - [X] Product model
  - [X] Category model
  - [X] Order model
  - [X] Review model
  - [X] Cart model
- [X] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes

### 3. Core Features - Customer Side [X]

- [X] Homepage:
  - [X] Featured products
  - [X] Categories navigation
  - [X] Search functionality
  - [X] Filters and sorting
- [X] Product pages:
  - [X] Product details
  - [X] Image gallery
  - [X] Reviews and ratings
  - [X] Related products
- [X] Shopping cart:
  - [X] Add/remove items
  - [X] Update quantities
  - [X] Cart persistence
- [X] Checkout process:
  - [X] Shipping information
  - [X] Payment integration (Stripe)
  - [X] Order confirmation
- [X] User dashboard:
  - [X] Order history
  - [X] Profile management
  - [X] Saved addresses
  - [X] Wishlist

### 4. Admin Dashboard [X]

- [X] Admin authentication and authorization
- [X] Dashboard overview:
  - [X] Sales analytics
  - [X] Recent orders
  - [X] Low stock alerts
  - [X] Revenue charts (Recharts)
- [X] Product management:
  - [X] CRUD operations
  - [X] Bulk actions
  - [X] Image upload (Uploadthing)
- [X] Order management:
  - [X] Order processing
  - [X] Status updates
  - [X] Refund handling
- [X] User management:
  - [X] Customer list
  - [X] Admin privileges
  - [X] User actions

### 5. Advanced Features [ ]

- [ ] Real-time notifications
- [X] Email system (Resend):
  - [X] Order confirmations
  - [X] Shipping updates
  - [X] Password reset
- [ ] Search optimization
- [ ] Performance optimization:
  - Image optimization
  - Caching strategies
  - API optimization
- [ ] Analytics and reporting

### 6. Testing and Deployment [ ]

- [ ] Unit testing
- [ ] Integration testing
- [ ] E2E testing
- [ ] Security audit
- [ ] Production deployment:
  - Environment setup
  - CI/CD pipeline
  - Monitoring
  - Backup strategy

### 7. Documentation [ ]

- [ ] API documentation
- [ ] User guide
- [ ] Admin documentationMore actions
- [ ] Deployment guide